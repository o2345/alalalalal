from db import Promo, Global, Games
from asset import func
from asset import keyboard
from asset import text as mess
from threading import Thread
from SimpleQIWI import *
from config import tokenQiwi, number


class adminCommandHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    def __init__(self, bot):
        self.bot = bot
        self.send = bot.send_message
        self.api = QApi(token=tokenQiwi, phone=number)

    @func.error_decorator
    def deletePromo(self, message):
        infoPromo = Promo.select().where(Promo.promo == message.text)
        if infoPromo.exists():
            Promo.delete().where(Promo.promo == message.text).execute()
            self.send(message.from_user.id, '–ü—Ä–æ–º–æ-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        else:
            self.send(message.from_user.id, '–ü—Ä–æ–º–æ-–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        self.send(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard.promoRemoute())

    @func.error_decorator
    def deleteGameAdmin(self, idGame, user_id):
        infoGame = Games.select().where(Games.id == idGame)
        if infoGame.exists():
            if infoGame[0].gamerTwo == 0:
                Games.delete().where(Games.id == idGame).execute()
                Global.update(balance=Global.balance + infoGame[0].balance).where(
                    Global.user_id == infoGame[0].user_id).execute()
                self.send(user_id, f'–ò–≥—Ä–∞ —Å id: {idGame} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
            else:
                self.send(user_id, '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –Ω–∞—á–∞—Ç—É—é –∏–≥—Ä—É')
        else:
            self.send(user_id, '–ò–≥—Ä–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')

    @func.error_decorator
    def giveAdmin(self, message):
        if message.text.isdigit():
            userInfo = Global.select().where(Global.user_id == message.text)
            if userInfo.exists():
                Global.update(adm=True).where(Global.user_id == message.text).execute()
                self.send(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')
            else:
                self.send(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            self.send(message.from_user.id, 'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä')

    @func.error_decorator
    def sendMoney(self, args, data):
        if int(self.api.balance[0]) >= int(args[2]):
            self.api.pay(account=args[1], amount=int(args[2]),
                         comment=f'–í—ã–ø–ª–∞—Ç–∞ –æ—Ç –±–æ—Ç–∞: @{self.bot.get_me().username}\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {args[0]}')
            self.bot.delete_message(chat_id=data.from_user.id, message_id=data.message.message_id)
            self.send(data.from_user.id, '–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
        else:
            self.send(data.from_user.id, f'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –±–∞–ª–∞–Ω—Å: {self.api.balance}')

    @func.error_decorator
    def backMoney(self, args, data):
        userInfo = Global.select().where(Global.user_id == args[0])
        if userInfo.exists():
            Global.update(balance=Global.balance + int(args[1])).where(Global.user_id == args[0]).execute()
            self.bot.delete_message(chat_id=data.from_user.id, message_id=data.message.message_id)
            self.send(data.from_user.id, '–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω')
            try:
                self.send(int(args[0]), '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–∞–∑–∞–ª –≤–∞–º –≤ –≤—ã–ø–ª–∞—Ç–µ, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å')
            except:
                pass
        else:
            self.bot.delete_message(chat_id=data.from_user.id, message_id=data.message.message_id)
            self.send(data.from_user.id, '–ü–æ–ª—å–∑–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

    @func.error_decorator
    def promoCreateFirst(self, message):
        info = Promo.select().where(Promo.promo == message.text)
        if not info.exists():
            count = self.send(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ')
            self.bot.register_next_step_handler(count, self.promoCreateTwo, message.text)
        else:
            self.send(message.from_user.id, '–ü—Ä–æ–º–æ-–∫–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

    @func.error_decorator
    def promoCreateTwo(self, message, promo):
        if message.text.isdigit():
            reger = [message.text, promo]
            balance = self.send(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø—Ä–æ–º–æ-–∫–æ–¥–∞: ')
            self.bot.register_next_step_handler(balance, self.promoCreateThree, reger)
        else:
            self.send(message.from_user.id, '–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä')

    @func.error_decorator
    def promoCreateThree(self, message, reger):
        if message.text.isdigit():
            if int(message.text) > 0:
                Promo.create(
                    promo=reger[1],
                    count=int(reger[0]),
                    balance=int(message.text),
                )
                self.send(message.from_user.id, mess.promoCreate.format(reger[1], message.text, reger[0]))
            else:
                self.send(message.from_user.id, '–ë–∞–ª–∞–Ω—Å –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 ')
        else:
            self.send(message.from_user.id, '–ë–∞–ª–∞–Ω—Å –ø—Ä–æ–º–æ-–∫–æ–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä!')
        self.send(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard.promoRemoute())

    @func.error_decorator
    def informUsers(self, message):
        Thread(target=self.statsResult, args=(message, message.text)).start()

    @func.error_decorator
    def statsResult(self, message, text):
        if message.text.isdigit():
            infoUser = Global.select().where(Global.user_id == message.text)
            if infoUser.exists():
                self.send(message.from_user.id,
                          mess.informUser.format(message.text, infoUser[0].username, infoUser[0].referalCount,
                                                 infoUser[0].balance, (infoUser[0].countWin + infoUser[0].countBad),
                                                 infoUser[0].countWin,
                                                 infoUser[0].countBad))
            else:
                self.send(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            infoUser = Global.select().where(Global.username == message.text)
            if infoUser.exists():
                self.send(message.from_user.id,
                          mess.informUser.format(infoUser[0].user_id, infoUser[0].username, infoUser[0].referalCount,
                                                 (infoUser[0].countWin + infoUser[0].countBad), infoUser[0].balance,
                                                 infoUser[0].countWin,
                                                 infoUser[0].countBad))
            else:
                self.send(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

    @func.error_decorator
    def sendQiwiAdmFirst(self, message):
        if message.text.isdigit():
            count = self.send(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞(–º–∞–∫—Å {self.api.balance[0]}): ')
            self.bot.register_next_step_handler(count, self.sendQiwiAdmTwo, message.text)
        else:
            self.send(message.from_user.id, '–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä!')

    @func.error_decorator
    def sendQiwiAdmTwo(self, message, number):
        if message.text.isdigit():
            if int(message.text) < int(self.api.balance[0]):
                self.api.pay(account=number, amount=int(message.text))
                self.send(message.from_user.id, '–£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤')
            else:
                self.send(message.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        else:
            self.send(message.from_user.id, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ —Ü–∏—Ñ—Ä–∞—Ö')

    @func.error_decorator
    def giveBalanceFirst(self, message):
        if message.text.isdigit():
            if Global.select().where(Global.user_id == message.text).exists():
                addBalance = self.send(message.from_user.id, '[‚úÖ]–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ')
                self.bot.register_next_step_handler(addBalance, self.giveBalanceTwo, message.text)
            else:
                self.send(message.from_user.id, '[üö´]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    @func.error_decorator
    def giveBalanceTwo(self, message, user_id):
        if message.text.isdigit():
            Global.update(balance=Global.balance + int(message.text)).where(Global.user_id == user_id).execute()
            self.send(message.from_user.id,
                      f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}\n–í—ã–¥–∞–ª–∏: {message.text}',
                      reply_markup=keyboard.adminPanel)
            try:
                self.send(user_id, f'[‚úÖ]–í–∞–º –≤—ã–¥–∞–ª–∏ {message.text} —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å')
            except Exception as e:
                pass
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]–°—É–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    @func.error_decorator
    def refPersNew(self, message):
        if message.text.isdigit():
            if int(message.text) < 100:
                func.updateAddRefPer(int(message.text))
                self.send(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
            else:
                self.send(message.from_user.id, '–ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ 100 –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 100')
        else:
            self.send(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')

    @func.error_decorator
    def rassulkaStart(self, message):
        if message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            photo = self.send(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç: ')
            self.bot.register_next_step_handler(photo, self.rassulka, message.text)

    @func.error_decorator
    def refComNew(self, message):
        if message.text.isdigit():
            func.updateAddRef(message.text)
            self.send(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–∏—Å–∏–æ–Ω–æ–≥–æ %')
        else:
            self.send(message.from_user.id, '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–∏—Å–ª–∞')

    @func.error_decorator
    def rassulka(self, message, text):
        banned = 0
        good = 0
        info = Global.select(Global.user_id)
        if message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        elif message.content_type == 'photo':
            self.send(message.from_user.id, '[‚úÖ]–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞', reply_markup=keyboard.adminPanel)
            for i in info:
                try:
                    self.bot.send_photo(chat_id=i.user_id, photo=message.json['photo'][2]['file_id'], caption=text, reply_markup=keyboard.menuUser)
                    good += 1
                except Exception as e:
                    banned += 1
            self.send(message.from_user.id,
                      f'[‚úÖ]–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç—á–µ—Ç\nüòé–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {good}\nü§¶‚Äç–û—à–∏–±–∫–∏: {banned}\nüå™–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info.count()}')
        else:
            self.send(message.from_user.id, '[‚úÖ]–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞', reply_markup=keyboard.adminPanel)
            for i in info:
                try:
                    self.send(chat_id=i.user_id, text=text, reply_markup=keyboard.menuUser)
                    good += 1
                except Exception as e:
                    banned += 1
            self.send(message.from_user.id,
                      f'[‚úÖ]–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç—á–µ—Ç\nüòé–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {good}\nü§¶‚Äç–û—à–∏–±–∫–∏: {banned}\nüå™–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info.count()}')

    @func.error_decorator
    def referalPersentOne(self, message):
        userGive = Global.select().where(Global.user_id == message.text)
        if message.text.isdigit():
            if userGive.exists():
                stepTwo = self.send(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π %: ')
                self.bot.register_next_step_handler(stepTwo, self.referalPersentTwo, message.text)
            else:
                self.send(message.from_user_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            self.send(message.from_user_id, 'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä')

    @func.error_decorator
    def referalPersentTwo(self, message, user_id):
        if message.text.isdigit():
            Global.update(referalPersonal=int(message.text)).where(Global.user_id == user_id).execute()
            self.send(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ—Ñ –ø—Ä–æ—Ü–µ–Ω—Ç')
        else:
            self.send(message.from_user_id, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π % —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–∏—Å–ª–∞')

    def balanceQiwi(self):
        return f'{self.api.balance[0]}'

    @func.error_decorator
    def delBalanceFirst(self, message):
        if message.text.isdigit():
            user = Global.select().where(Global.user_id == message.text)
            if user.exists():
                addBalance = self.send(message.from_user.id,
                                       f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[0].balance}\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ')
                self.bot.register_next_step_handler(addBalance, self.delBalanceTwo, message.text)
            else:
                self.send(message.from_user.id, '[üö´]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    @func.error_decorator
    def delBalanceTwo(self, message, user_id):
        if message.text.isdigit():
            user = Global.select().where(Global.user_id == user_id)
            if user[0].balance >= int(message.text):
                Global.update(balance=Global.balance - int(message.text)).where(Global.user_id == user_id).execute()
                self.send(message.from_user.id, f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ {message.text} —Ä—É–±–ª–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                          reply_markup=keyboard.adminPanel)
            else:
                self.send(message.from_user.id,
                          f'[üö´]–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[0].balance}',
                          reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]–°—É–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    @func.error_decorator
    def activePromoNow(self, message, c):
        infoPromo = Promo.select().where(Promo.count > 0)
        lists = ''
        for i in infoPromo:
            lists = lists + f' –ü—Ä–æ–º–æ: <pre>{i.promo}</pre>, –ö–æ–ª-–≤–æ –∞–∫—Ç: {i.count} |'
        self.send(c.from_user.id, '–†–∞–±–æ—á–∏–µ –ø—Ä–æ–º–æ\n'+lists)