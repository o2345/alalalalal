# -*- coding: utf-8 -*-

import telebot
import config
import json
import math
import os.path
import psutil as ps
from datetime import datetime
import requests
from asset import text as mess
import random
from threading import Thread
from db import *
from asset import keyboard
from config import linkTg
from classes.usersCommand import usersCommandHandler
import time
from asset import func
from classes.tictacgame import TicTacGame
from classes.adminCommand import adminCommandHandler


class Bot:
    def __init__(self, phone, token, admin_id, qiwiApi):
        con()
        self.bot = telebot.TeleBot(token=token, threaded=True, parse_mode='HTML')
        self.phone = phone
        self.qiwiApi = qiwiApi
        self.startime = datetime.now()
        self.user = []
        self.send = self.bot.send_message
        self.admin_id = admin_id
        self.listCheck = []
        self.userDay = []
        self.give24give = []
        self.give24pay = []
        Thread(target=self.zeroListCheck).start()
        print('–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ 1')
        Thread(target=self.clearUserHours).start()
        print('–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ 2')
        Thread(target=self.clearUserDay).start()
        print('–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ 3')
        Thread(target=self.clear24give).start()
        print('–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ 4')
        Thread(target=self.clear24pay).start()
        print('–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ 5')
        if os.path.exists('asset/stat.txt'):
            pass
        else:
            file = open('asset/stat.txt', 'w')
            file.write(mess.writeFile)
            file.close()
            print('–°–æ–∑–¥–∞–ª —Ñ–∞–π–ª stat.txt')
        print(f'–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ @{self.bot.get_me().username}')

        @self.bot.message_handler(commands=['start'])
        def startCommand(message):
            text = message.text.split(' ')
            user_id = message.from_user.id
            infoUser = Global.select().where(Global.user_id == user_id)
            if infoUser.exists():
                if len(text) == 2:
                    if Global.select().where(Global.user_id == text[1]).exists():
                        if infoUser[0].referal == 0:
                            if user_id != int(text[1]):
                                Global.update(referal=text[1]).where(Global.user_id == message.from_user.id).execute()
                                Global.update(referalCount=Global.referalCount + 1).where(
                                    Global.user_id == text[1]).execute()
                                self.send(message.from_user.id, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                                          reply_markup=keyboard.menuUser)
                        else:
                            self.send(message.from_user.id, '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º',
                                      reply_markup=keyboard.menuUser)
                    else:
                        self.send(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=keyboard.menuUser)
                else:
                    self.send(message.from_user.id, '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏',
                              reply_markup=keyboard.menuUser)
            else:
                Global.create(
                    user_id=user_id,
                    username='@' + str(message.from_user.username)
                )
                self.user.append(user_id)
                if len(text) == 2:
                    if Global.select().where(Global.user_id == user_id).exists():
                        if user_id != int(text[1]):
                            Global.update(referalCount=Global.referalCount + 1).where(
                                Global.user_id == text[1]).execute()
                            Global.update(referal=text[1]).where(Global.user_id == message.from_user.id).execute()
                            self.send(message.from_user.id, mess.start, reply_markup=keyboard.menuUser)
                    else:
                        self.send(message.from_user.id, mess.start, reply_markup=keyboard.menuUser)
                else:
                    self.send(message.from_user.id, mess.start, reply_markup=keyboard.menuUser)

        @self.bot.message_handler(content_types=['text'])
        def userCommand(message):
            TicTac = TicTacGame(self.bot)
            chat_id = message.chat.id
            user_id = message.from_user.id
            userInfo = Global.select().where(Global.user_id == user_id)
            print(f'–í–≤–µ–ª –∫–æ–º–∞–Ω–¥—É: {message.text} | {user_id}')
            if userInfo.exists():
                Global.update(username='@' + str(message.from_user.username)).where(
                    Global.user_id == message.from_user.id).execute()
                if message.text == 'üòé21 –û—á–∫–æ':
                    with open(f'photo/gamelist.jpg', 'rb') as f1:
                        self.bot.send_photo(chat_id=chat_id, caption='‚ôª–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: ', photo=f1,
                                            reply_markup=keyboard.gameAll())
                        f1.close()
                elif message.text == 'üå™–ò–≥—Ä—ã':
                    self.send(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å', reply_markup=keyboard.menuGame)
                elif message.text == 'üñ• –ö–∞–±–∏–Ω–µ—Ç':
                    with open(f'photo/cabinet.jpg', 'rb') as f1:
                        self.bot.send_photo(chat_id=chat_id,
                                            caption=mess.profile.format(user_id, userInfo[0].balance,
                                                                        userInfo[0].countWin + userInfo[0].countBad,
                                                                        userInfo[0].countWin, userInfo[0].countBad),
                                            reply_markup=keyboard.cabinet, photo=f1)
                        f1.close()
                elif message.text == 'üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                    with open(f'photo/cabinet.jpg', 'rb') as f1:
                        game, balance = func.statBase()
                        self.bot.send_photo(chat_id=chat_id,
                                            caption=f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—ã–≥—Ä–∞–ª–∏ {game} –∏–≥—Ä –Ω–∞ —Å—É–º–º—É {balance} —Ä—É–±–ª–µ–π.',
                                            reply_markup=keyboard.informKeyboard(), photo=f1)
                        f1.close()
                elif message.text == '‚ö†–ü–æ–º–æ—â—å‚ö†':
                    self.send(text=f'üòé–ë–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª: @gop_len\nüö®–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {linkTg}', chat_id=chat_id)
                elif message.text == '/admin':
                    if message.from_user.id == self.admin_id:
                        self.send(user_id, '–í–∞–º –æ—Ç–∫—Ä—ã–ª—Å—è –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É',
                                  reply_markup=keyboard.adminPanel)
                    elif userInfo[0].adm:
                        self.send(user_id, '–í–∞–º –æ—Ç–∫—Ä—ã–ª—Å—è –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É',
                                  reply_markup=keyboard.adminPanel)
                elif message.text == '‚úÖ–ö—Ä–µ—Å—Ç–∏–∫–∏, –ù–æ–ª–∏–∫–∏':
                    with open(f'photo/CrestGame.jpg', 'rb') as f1:
                        self.bot.send_photo(chat_id=message.from_user.id, caption='üìõ–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ãüìõ', reply_markup=TicTac.allGame(), photo=f1)
                        f1.close()
                elif message.text == 'üî•–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üî•':
                    self.send(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=keyboard.menuUser)
                else:
                    if user_id == self.admin_id:
                        adminCommand(message)
                    elif userInfo[0].adm:
                        adminCommand(message)
            else:
                self.send(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')

        def adminCommand(message):
            reload = adminCommandHandler(self.bot)
            chat_id = message.from_user.id
            if message.text == '–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å':
                addBalance = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', reply_markup=keyboard.cancelButton)
                self.bot.register_next_step_handler(addBalance, reload.giveBalanceFirst)
            elif message.text == '–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞':
                admin = self.send(chat_id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')
                self.bot.register_next_step_handler(admin, reload.giveAdmin)
            elif message.text == '–ó–∞–±—Ä–∞—Ç—å –±–∞–ª–∞–Ω—Å':
                delBalance = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', reply_markup=keyboard.cancelButton)
                self.bot.register_next_step_handler(delBalance, reload.delBalanceFirst)
            elif message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏':
                self.send(chat_id, '[‚úÖ]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard.usersAdm)
            elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É':
                self.send(chat_id, '[‚úÖ]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard.informAdmin)
            elif message.text == '<<<–ù–∞–∑–∞–¥':
                self.send(message.from_user.id, '–í–∞–º –æ—Ç–∫—Ä—ã–ª—Å—è –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É',
                          reply_markup=keyboard.adminPanel)
            elif message.text == '–ù–∞–∑–∞–¥':
                self.send(message.from_user.id, '–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=keyboard.menuUser)
            elif message.text == '–°–µ—Ä–≤–µ—Ä':
                self.send(chat_id, self.serverInform())
            elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                self.send(message.from_user.id, self.statsInform())
            elif message.text == '–†–µ—Ñ.–ø—Ä–æ—Ü–µ–Ω—Ç':
                self.send(message.from_user.id, func.persentRef())
            elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ.–ø—Ä–æ—Ü–µ–Ω—Ç':
                persNew = self.send(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π %: ')
                self.bot.register_next_step_handler(persNew, reload.refPersNew)
            elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
                category = self.send(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∞', reply_markup=keyboard.cancelButton)
                self.bot.register_next_step_handler(category, reload.rassulkaStart)
            elif message.text == '–ö–æ–º.–ø—Ä–æ—Ü–µ–Ω—Ç':
                self.send(message.from_user.id, func.persentGive())
            elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º.–ø—Ä–æ—Ü–µ–Ω—Ç':
                persNew = self.send(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∏—Å–∏–æ–Ω–Ω—ã–π %: ')
                self.bot.register_next_step_handler(persNew, reload.refComNew)
            elif message.text == '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ñ.–ø—Ä–æ—Ü–µ–Ω—Ç':
                user_id = self.send(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')
                self.bot.register_next_step_handler(user_id, reload.referalPersentOne)
            elif message.text == '–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É':
                self.send(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=keyboard.gameAdminDelete())
            elif message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ':
                self.send(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard.promoRemoute())
            elif message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Qiwi':
                self.send(chat_id, '–í–∞–º –æ—Ç–∫—Ä—ã–ª—Å—è —Ä–∞–∑–¥–µ–ª "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Qiwi"', reply_markup=keyboard.qiwiAdm)
            elif message.text == '–ë–∞–ª–∞–Ω—Å Qiwi':
                self.send(chat_id, f'–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {reload.balanceQiwi()}—Ä')
            elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
                idUser = self.send(chat_id, '–í–≤–µ–¥–∏—Ç–µ (id/username) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')
                self.bot.register_next_step_handler(idUser, reload.informUsers)
            elif message.text == '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏':
                qiwi = self.send(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–∏–≤–∏ –∫–æ—à–µ–ª–µ–∫: ')
                self.bot.register_next_step_handler(qiwi, reload.sendQiwiAdmFirst)

        @self.bot.callback_query_handler(func=lambda c: True)
        def inline(c):
            TicTac = TicTacGame(self.bot)
            userCmd = usersCommandHandler(self.bot)
            Global.update(username='@' + str(c.from_user.username)).where(Global.user_id == c.from_user.id).execute()
            user_id = c.from_user.id
            infoUser = Global.select().where(Global.user_id == c.from_user.id)
            print(f'–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {c.data} | {user_id}')
            self.bot.clear_step_handler_by_chat_id(chat_id=user_id)
            if infoUser.exists():
                if c.data == 'createGame':
                    balance = self.send(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É: ')
                    self.bot.register_next_step_handler(balance, userCmd.gameCreate)
                elif c.data == 'myGame':
                    try:
                        self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                        self.send(
                            chat_id=user_id, text='‚ôª–í–∞—à–∏ –∏–≥—Ä—ã: ',
                            reply_markup=keyboard.gameUser(user_id))
                    except:
                        pass
                elif c.data == 'back':
                    try:
                        self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                        self.send(
                                    chat_id=user_id,
                                    text='‚ôª–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: ',
                                    reply_markup=keyboard.gameAll())
                    except:
                        pass
                elif c.data == 'reloadGame':
                    try:
                        self.bot.delete_message(user_id, c.message.message_id)
                        self.send(user_id, '‚ôª–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: ', reply_markup=keyboard.gameAll())
                    except:
                        pass
                elif 'gameCon_' in c.data:
                    idGame = c.data[8:]
                    infoGame = Games.select().where(Games.id == idGame)
                    if not infoGame.exists:
                        if infoGame[0].gamerTwo == 0:
                            self.send(user_id, '–ò–≥—Ä—ã –Ω–µ —Å—É—â–µc—Ç–≤—É–µ—Ç', reply_markup=keyboard.reloadGame)
                    else:
                        userCmd.connectGame(user_id, idGame)
                elif 'firstAdd_' in c.data:
                    idGame = c.data[9:]
                    userCmd.firstAddCard(idGame, user_id, c)
                elif 'firstGive_' in c.data:
                    idGame = c.data[10:]
                    userCmd.firstGive(idGame, user_id, c)
                elif 'twoAdd_' in c.data:
                    idGame = c.data[7:]
                    userCmd.twoAddCard(idGame, user_id, c)
                elif 'allIn_' in c.data:
                    idGame = c.data[6:]
                    userCmd.allIn(idGame, user_id, c)
                elif 'gameDel_' in c.data:
                    idGame = c.data[8:]
                    userCmd.dellGame(idGame, user_id, c)
                elif c.data == 'refSys':
                    if infoUser[0].referalPersonal == 0:
                        self.send(user_id,
                                  mess.refSystem.format(func.persentRef(), self.bot.get_me().username, user_id,
                                                        infoUser[0].referalCount))
                    else:
                        self.send(user_id,
                                  mess.refSystem.format(infoUser[0].referalPersonal, self.bot.get_me().username,
                                                        user_id,
                                                        infoUser[0].referalCount))
                elif c.data == 'addBalanceQiwi':
                    userHistory = payBalance.select().where(payBalance.user_id == user_id)
                    comments = random.randint(999999, 9999999)
                    if userHistory.exists():
                        if not userHistory[0].status:
                            self.send(user_id,
                                      mess.textPay.replace('{com}', str(userHistory[0].comment)).replace('{num}',
                                                                                                         str(
                                                                                                             self.phone)).replace(
                                          '{link}', linkTg), reply_markup=keyboard.linkPay(userHistory[0].comment))
                        else:
                            payBalance.update(comment=comments, status=False).where(
                                payBalance.user_id == user_id).execute()
                            self.send(user_id,
                                      mess.textPay.replace('{com}', str(comments)).replace('{num}',
                                                                                           str(self.phone)).replace(
                                          '{link}', linkTg), reply_markup=keyboard.linkPay(comments))
                    else:
                        payBalance.create(
                            user_id=user_id,
                            comment=comments)
                        self.send(user_id,
                                  mess.textPay.replace('{com}', str(comments)).replace('{num}',
                                                                                       str(self.phone)).replace(
                                      '{link}', linkTg), reply_markup=keyboard.linkPay(comments))
                elif c.data == 'addBalance':
                    try:
                        self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                        self.send(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É', reply_markup=keyboard.payment())
                    except:
                        pass
                elif c.data == 'addBalanceBtc':
                    self.send(user_id, f'–ß–µ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: {config.linkTg}')
                elif c.data == 'checkPay':
                    userPay = payBalance.select().where(payBalance.user_id == c.from_user.id,
                                                        payBalance.status == False)
                    if c.from_user.id not in self.listCheck:
                        self.listCheck.append(c.from_user.id)
                        if userPay.exists():
                            Thread(target=self.check_pay, args=(userPay[0].comment, c.from_user.id, c)).start()
                        else:
                            self.send(c.from_user.id, '[‚ùå]–í–Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <pre>üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</pre>')
                    else:
                        self.send(c.from_user.id, '[‚ùå]–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å')
                elif c.data == 'giveMoney':
                    numberUser = self.send(user_id, 'üì§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Qiwi –ö–æ—à–µ–ª–µ–∫ (–ë–µ–∑ +):')
                    self.bot.register_next_step_handler(numberUser, self.sendQiwi)
                elif c.data == 'top10':
                    try:
                        self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                        self.send(chat_id=user_id, text='‚Ñπ–ò–º—è |üïπ –ò–≥—Ä—ã |üèÜ –ü–æ–±–µ–¥—ã |‚òπÔ∏è –ü—Ä–æ–∏–≥—Ä—ã—à–∏',
                                  reply_markup=keyboard.top10gamers())
                    except:
                        pass
                elif c.data == 'back2':
                    game, balance = func.statBase()
                    try:
                        self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                        self.send(user_id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—ã–≥—Ä–∞–ª–∏ {game} –∏–≥—Ä –Ω–∞ —Å—É–º–º—É {balance} —Ä—É–±–ª–µ–π.',
                                  reply_markup=keyboard.informKeyboard())
                    except:
                        pass
                elif c.data == 'promoActivate':
                    promo = self.send(user_id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥: ')
                    self.bot.register_next_step_handler(promo, userCmd.promoActivate)
                elif c.data == 'createTicTac':
                    balanceGame = self.send(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:')
                    self.bot.register_next_step_handler(balanceGame, TicTac.createGame, c.from_user.id)
                    TicTac.createGame(c.from_user.id)
                elif c.data == 'reloadTicTac':
                    self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                    self.send(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É', reply_markup=TicTac.allGame())
                if c.data[:5] == 'bomb_':
                    params = c.data[5:].split(':')
                    if params[0].isdigit():
                        infoGame = GamesTicTac.select().where(GamesTicTac.idGame == params[1],
                                                              GamesTicTac.status == False)
                        if infoGame[0].creater == c.from_user.id:
                            try:
                                self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                            except:
                                pass
                            TicTac.tic(params[1], params[0], c)
                        elif infoGame[0].gamerTwo == c.from_user.id:
                            try:
                                self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                            except:
                                pass
                            TicTac.tac(params[1], params[0], c)
                        else:
                            self.send(user_id, '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!')
                    else:
                        self.send(c.from_user.id, '–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞')
                elif c.data[:11] == 'connectTic_':
                    idGame = c.data[11:]
                    TicTac.connectTicTac(idGames=idGame, user_id=c.from_user.id)
                else:
                    if user_id == self.admin_id:
                        adminInline(c)
                    elif infoUser[0].adm:
                        adminInline(c)
            else:
                self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                self.send(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')

        def adminInline(c):
            reload = adminCommandHandler(self.bot)
            user_id = c.from_user.id
            if c.data == 'closeMessage':
                try:
                    self.bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
                except:
                    pass

            elif 'send_' in c.data:
                perm = c.data[5:]
                ready = perm.split(':')
                reload.sendMoney(ready, c)

            elif 'backMoney_' in c.data:
                perm = c.data[10:]
                ready = perm.split(':')
                reload.backMoney(ready, c)

            elif 'gameDelAdmin_' in c.data:
                idGame = c.data[13:]
                reload.deleteGameAdmin(idGame, user_id)

            elif c.data == 'createPromo':
                promo = self.send(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∫–æ–¥–∞: ')
                self.bot.register_next_step_handler(promo, reload.promoCreateFirst)

            elif c.data == 'deletePromo':
                promo = self.send(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∫–æ–¥–∞: ')
                self.bot.register_next_step_handler(promo, reload.deletePromo)

            elif c.data == 'activePromo':
                Thread(target=reload.activePromoNow, args=(c.data, c)).start()

        self.bot.infinity_polling(True)

    def clearUserHours(self):
        while True:
            time.sleep(3600)
            self.user.clear()

    def clearUserDay(self):
        while True:
            time.sleep(86400)
            self.userDay.clear()

    def zeroListCheck(self):
        while True:
            time.sleep(60)
            self.listCheck.clear()

    def clear24pay(self):
        while True:
            time.sleep(86400)
            self.give24pay.clear()

    def clear24give(self):
        while True:
            time.sleep(86400)
            self.give24give.clear()

    @func.error_decorator
    def check_pay(self, comment, user_id, data):
        userInfo = Global.select().where(Global.user_id == user_id)
        try:
            h = requests.get(
                'https://edge.qiwi.com/payment-history/v1/persons/' + str(self.phone) + '/payments?rows=50',
                headers={'Accept': 'application/json',
                         'Content-Type': 'application/json',
                         'Authorization': f'Bearer {self.qiwiApi}'})
            req = json.loads(h.text)
            count = 0
            for i in range(len(req['data'])):
               if req['data'][i]['sum']['currency'] == 643:
                    if req['data'][i]['comment'] == f"{comment}":
                        count += 1
                        amount = req['data'][i]['sum']['amount']
                        amount = round(amount)
                        Global.update(balance=Global.balance + int(amount)).where(Global.user_id == user_id).execute()
                        payBalance.update(status=True).where(payBalance.user_id == user_id).execute()
                        break
            if count == 1:
                self.send(user_id, f'[‚úÖ]–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±–ª(—è/–µ–π)')
                self.give24pay.append(amount)
                func.updateAddQiwi(int(amount))
                self.send(self.admin_id, f'[‚úÖ]–ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂[‚úÖ]\n–°—É–º–º–∞: {amount}\n–ü–æ–ø–æ–ª–Ω–∏–ª: {user_id}')
                if userInfo[0].referal != 0:
                    if userInfo[0].referalPersonal != 0:
                        self.bot.delete_message(chat_id=user_id, message_id=data.message.message_id)
                        Global.update(
                            balance=Global.balance + math.floor(amount / 100 * userInfo[0].referalPersonal)).where(
                            Global.user_id == userInfo[0].referal).execute()
                    else:
                        self.bot.delete_message(chat_id=user_id, message_id=data.message.message_id)
                        Global.update(
                            balance=Global.balance + math.floor(int(amount) / 100 * int(func.persentRef()))).where(
                            Global.user_id == userInfo[0].referal).execute()
            else:
                self.send(user_id, f'–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        except Exception as e:
            print(e)

    @func.error_decorator
    def sendQiwi(self, message):
        if message.text.isdigit():
            sumSend = self.send(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã(–Ω–µ –º–µ–Ω—å—à–µ 49)')
            self.bot.register_next_step_handler(sumSend, self.sendQiwiTwo, message.text)
        else:
            self.send(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∫–∏–≤–∏')

    @func.error_decorator
    def sendQiwiTwo(self, message, number):
        balance = Global.select().where(Global.user_id == message.from_user.id)[0].balance
        if message.text.isdigit():
            if balance >= int(message.text):
                if int(message.text) >= 49:
                    Global.update(balance=Global.balance - int(message.text)).where(
                        Global.user_id == message.from_user.id).execute()
                    self.send(message.from_user.id, mess.giveMoney.format(message.text, number))
                    self.send(self.admin_id,
                              mess.giveMoneyAdmin.format(message.text, number, message.from_user.username,
                                                         message.from_user.id),
                              reply_markup=keyboard.closeMessage(message.from_user.id, number, message.text))
                    try:
                        self.send(config.idMoney,
                                  mess.sendMoney.format(message.text, '@' + str(message.from_user.username)))
                    except:
                        pass
                    self.give24give.append(int(message.text))
                    func.updateReturnQiwi(int(message.text))
                else:
                    self.send(message.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã 49 —Ä—É–±–ª–µ–π')
            else:
                self.send(message.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        else:
            self.send(message.from_user.id, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —á–∏—Å–µ–ª')

    def serverInform(self):
        threads = ps.cpu_count(logical=False)
        lthreads = ps.cpu_count()
        RAM = ps.virtual_memory().percent
        cpu_percents = ps.cpu_percent(percpu=True)
        starttime = datetime.now() - self.startime
        cpupercents = ""
        for a in range(lthreads):
            cpupercents += "–ü–æ—Ç–æ–∫ : {} | –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å : {} %\n".format(a + 1, cpu_percents[a - 1])
        return """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º :
–Ø–¥–µ—Ä : {} | –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å : {}%
{}–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –û–ó–£ : {} %
–í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å–æ —Å—Ç–∞—Ä—Ç–∞ : {} """.format(threads, ps.cpu_percent(), cpupercents, RAM,
                                         "{} –¥–Ω–µ–π, {} —á–∞—Å–æ–≤, {} –º–∏–Ω—É—Ç.".format(starttime.days,
                                                                               starttime.seconds // 3600,
                                                                               (

                                                                                       starttime.seconds % 3600) // 60))

    def statsInform(self):
        allUser = Global.select().count()
        return mess.stats.format(allUser, len(self.userDay), len(self.user), sum(self.give24pay),
                                 sum(self.give24give),
                                 func.qiwiCount(), func.qiwiReturn())